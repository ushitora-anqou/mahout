(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Io_k8s_api_resource_v1alpha2_driver_allocation_result.t : DriverAllocationResult contains vendor parameters and the allocation result for one request.
 *)

[@@@warning "-32-34"]
open (struct
    include Ppx_yojson_conv_lib.Yojson_conv.Primitives
    type any = Yojson.Safe.t
    let any_of_yojson = Fun.id
    let yojson_of_any = Fun.id
    let pp_any = Yojson.Safe.pp
    let show_any = Yojson.Safe.show
    let string_of_yojson = function
      | `String s -> s
      | `Int i -> string_of_int i
      | _ -> failwith "string_of_yojson: string or int needed"
end)
type t = {
    named_resources: Io_k8s_api_resource_v1alpha2_named_resources_allocation_result.t option [@yojson.default None] [@yojson.key "namedResources"];
    (* RawExtension is used to hold extensions in external versions.  To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.  // Internal package:   type MyAPIObject struct {   runtime.TypeMeta `json:\'',inline\''`   MyPlugin runtime.Object `json:\''myPlugin\''`  }   type PluginA struct {   AOption string `json:\''aOption\''`  }  // External package:   type MyAPIObject struct {   runtime.TypeMeta `json:\'',inline\''`   MyPlugin runtime.RawExtension `json:\''myPlugin\''`  }   type PluginA struct {   AOption string `json:\''aOption\''`  }  // On the wire, the JSON will look something like this:   {   \''kind\'':\''MyAPIObject\'',   \''apiVersion\'':\''v1\'',   \''myPlugin\'': {    \''kind\'':\''PluginA\'',    \''aOption\'':\''foo\'',   },  }  So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.) *)
    vendor_request_parameters: any option [@yojson.default None] [@yojson.key "vendorRequestParameters"];
} [@@deriving yojson, show, make] [@@yojson.allow_extra_fields];;
let to_yojson = yojson_of_t
let of_yojson x =
  try
    Ok (t_of_yojson x)
  with
  | Ppx_yojson_conv_lib.Yojson_conv.Of_yojson_error (e, j) ->
      Error (Printf.sprintf "%s: %s" (Printexc.to_string e) (Yojson.Safe.to_string j))


