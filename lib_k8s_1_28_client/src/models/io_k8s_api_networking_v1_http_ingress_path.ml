(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Io_k8s_api_networking_v1_http_ingress_path.t : HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
 *)

type t = {
    backend: Io_k8s_api_networking_v1_ingress_backend.t [@yojson.key "backend"];
    (* path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \''path\'' part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \''Exact\'' or \''Prefix\''. *)
    path: string option [@yojson.default None] [@yojson.key "path"];
    (* pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is   done on a path element by element basis. A path element refers is the   list of labels in the path split by the '/' separator. A request is a   match for path p if every p is an element-wise prefix of p of the   request path. Note that if the last element of the path is a substring   of the last element in request path, it is not a match (e.g. /foo/bar   matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to   the IngressClass. Implementations can treat this as a separate PathType   or treat it identically to Prefix or Exact path types. Implementations are required to support all path types. *)
    path_type: string [@yojson.key "pathType"];
} [@@deriving yojson { strict = false }, show, make];;


