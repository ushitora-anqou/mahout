(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Io_k8s_api_core_v1_node_system_info.t : NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
 *)

type t = {
    (* The Architecture reported by the node *)
    architecture: string;
    (* Boot ID reported by the node. *)
    boot_id: string;
    (* ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2). *)
    container_runtime_version: string;
    (* Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64). *)
    kernel_version: string;
    (* KubeProxy Version reported by the node. *)
    kube_proxy_version: string;
    (* Kubelet Version reported by the node. *)
    kubelet_version: string;
    (* MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html *)
    machine_id: string;
    (* The Operating System reported by the node *)
    operating_system: string;
    (* OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)). *)
    os_image: string;
    (* SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid *)
    system_uuid: string;
} [@@deriving yojson { strict = false }, show ];;

(** NodeSystemInfo is a set of ids/uuids to uniquely identify the node. *)
let create (architecture : string) (boot_id : string) (container_runtime_version : string) (kernel_version : string) (kube_proxy_version : string) (kubelet_version : string) (machine_id : string) (operating_system : string) (os_image : string) (system_uuid : string) : t = {
    architecture = architecture;
    boot_id = boot_id;
    container_runtime_version = container_runtime_version;
    kernel_version = kernel_version;
    kube_proxy_version = kube_proxy_version;
    kubelet_version = kubelet_version;
    machine_id = machine_id;
    operating_system = operating_system;
    os_image = os_image;
    system_uuid = system_uuid;
}

